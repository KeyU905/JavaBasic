package day0331;
// 자바의 명명규칙(Naming Conversation)
// 자바는 대소문자를 엄격하게 구분하는 언어로써
// 어떤 것의 이름을 지어줄 때에 특정한 규칙이 존재한다.
// 그 규칙을 여러분들이 안지키셔도 문제는 없지만
// 여러분들이 어느 정도의 경력을 쌓고 나면
// 오히려 이 규칙을 지켜주는 것이 소통할 때와 코딩을 할 때
// 도움이 된다는 것을 깨달으실 수 있다.

// 1. 이름은  _ 를 제외한 특수문자가 들어갈 수 없다.
// 2. 한글로 된 이름은 이젠 사용가능하지만 절대로 쓰지 말자.
// 3. 이름의 중간이나 끝에는 숫자가 올 수 있지만 이름의 시작은 숫자가 될 수 없다.
// 4. 자바에는 내부적으로 기능을 정의한 50여가지의 키워드가 존재한다.
//      해당 키워드로는 이름을 만들 수 없으므로 여러분들은 그 50여가지의 단어를 
//      외우셔야 한다. --> 내일 시험
// 5. 낙타등 표기법(Camel back notation)
//    낙타등 표기법이란 이름이 여러 개의 단어로 이루어져 있고, 대소문자를 모두 사용하는 경우에는
//    두번째 단어부터는 각 단어의 첫글자를 대문자로 표시해주는 방법이다.
//    예를 들어 myNumber의 경우, my 한 단어와 Number 한 단어 총 두단어로 이루어져 있고
//    대소문자가 모두 쓰이기 때문에 단어간의 구별을 위해 두번째 단어인 Number의 첫 글자를 대문자로
//    적어주게 된다.
// 6. 뱀 표기법(Snake notation)
//    뱀 표기법은 모든 철자를 대문자로 적어주는 경우에는 단어가느이 구별을 위해서 단어 사이에 _를 넣어주는 것을
//    뱀 표기법이라고 한다.
//    예를 들어 UPLOAD_PATH 의 경우, _가 없으면 UPLOADPATH 라고 적히는데 이렇게 되면 해당 단어가 무슨 뜻인지를
//    알아보기가 힘들다. 따라서 모든 절차가 대문자일 경우, 단어 사이에  _를 넣어서 구분하게 된다.


//  경우에 따른 이름 짓는 규칙
//  1. 클래스는 대문자로 시작하고 낙타등 표기법을 사용하는 명사
//  2. 패키지는 소문자로 시작하는 명사이되, 주로 한 개의 단어만 사용한다.
//  3. 메소드는 소문자로 시작하고 낙타등 표기법을 사용하는 동사
//     단, 메소드는 프로그래밍의 문법상 반드시 이름 뒤에 ()가 붙는다.
//  4. 변수는 소문자로 시작하고 낙타등 표기법을 사용하는 명사
//  5. 상수는 뱀 표기법을 사용하는 명사

// 또한 예전과는 다르게 이름을 지을 때 더이상 축약어를 쓰지 않는 편이다.
// 만약 단어의 길이가 너무 길지 않을 때에는 그 이름을 모두 다 적어주게 된다.
public class Ex03Naming {
    // 1. MemberController -> Class

    // 2. memberController -> 변수
    
    // 3. selectAll() ->  메소드
    
    // 4. MEMBER_PATH -> 상수
    
}
